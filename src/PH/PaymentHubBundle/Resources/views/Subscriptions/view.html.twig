{% extends 'OroUIBundle:actions:view.html.twig' %}
{% import 'OroUIBundle::macros.html.twig' as UI %}

{% set pageTitle = 'Subscription'|trans ~' #'~subscription.orderId %}
{% block navButtons %}
    {% if resource_granted('EDIT', subscription) %}
        {{ UI.editButton({
            'path' : path('subscriptions.subscription_update', { id: subscription.id }),
            'entity_label': 'Subscription'|trans
        }) }}
    {% endif %}

    {% if resource_granted('DELETE', subscription) %}
        {{ UI.deleteButton({
            'dataUrl': path('subscriptions_api_delete_subscription', {'id': subscription.id}),
            'dataRedirect': path('subscriptions.subscription_index'),
            'aCss': 'no-hash remove-button',
            'id': 'btn-remove-subscription',
            'dataId': subscription.id,
            'entity_label': 'Subscription'|trans,
        }) }}
    {% endif %}
    {% if resource_granted('CANCEL', subscription) and entity.state != 'cancelled' %}
        {{ UI.button({
            'path' : path('subscriptions.subscription_cancel', {id: entity.id}),
            'aCss': 'cancel-btn btn-danger',
            'iCss': 'fa-ban',
            'label': 'ph.paymenthub.subscriptions.cancel_button.label'|trans,
            'title': 'ph.paymenthub.subscriptions.cancel_button.label'|trans
        }) }}
    {% endif %}
{% endblock navButtons %}

{% block pageHeader %}
    {% set breadcrumbs = {
        'entity':      subscription,
        'indexPath':   path('subscriptions.subscription_index'),
        'indexLabel': 'Subscriptions'|trans,
        'entityTitle': 'Subscription #'~subscription.orderId
    } %}
    {{ parent() }}
{% endblock pageHeader %}

{% block content_data %}
    {% set data %}
        <div class="widget-content">
            <div class="row-fluid form-horizontal">
                <div class="responsive-block">
                    {{ UI.renderProperty('Id'|trans, subscription.orderId) }}
                    {{ UI.renderProperty('Token'|trans, subscription.token) }}
                    {{ UI.renderProperty('Total ammount'|trans, subscription.total|number_format(2, '.', ',')) }}
                    {{ UI.renderProperty('Provider Typer'|trans, subscription.providerType) }}
                    {{ UI.renderProperty('State'|trans, subscription.state) }}
                    {{ UI.renderProperty('Payment state'|trans, subscription.paymentState) }}
                    {{ UI.renderProperty('Purchase state'|trans, subscription.purchaseState) }}
                    {{ UI.renderProperty('Created date'|trans, subscription.createdAt | date('Y-m-d H:i:s')) }}
                    {{ UI.renderProperty('Updated date'|trans, subscription.updatedAt ?  subscription.updatedAt|date('Y-m-d H:i:s'): '') }}
                    {{ UI.renderProperty('Purchase completed'|trans, subscription.checkoutCompletedAt?  subscription.checkoutCompletedAt|date('Y-m-d H:i:s'): '') }}
                    {{ UI.renderProperty('Type'|trans, subscription.type) }}
                    {{ UI.renderProperty('Interval'|trans, subscription.interval) }}
                    {{ UI.renderProperty('Source'|trans, subscription.source) }}
                    {{ UI.renderProperty('Intention'|trans, subscription.intention) }}
                    {{ UI.renderProperty('Start date'|trans, subscription.startDate | date('Y-m-d')) }}
                    {{ UI.renderHtmlProperty('Customer'|trans, subscription.customer?  UI.renderUrl(path('subscriptions.customer_view', {'id': subscription.customer.id}), subscription.customer.firstName ~' '~subscription.customer.lastName)) }}
                </div>
            </div>
        </div>
    {% endset %}
    {% set payments %}
        <div class="widget-content" style="border-bottom: 1px solid #ccc;">
            {% for payment in subscription.payments %}
                <div class="row-fluid form-horizontal" style="border-bottom: 1px solid #ccc;">
                    <div class="responsive-block">
                        {{ UI.renderProperty('Payment id'|trans, payment.paymentId) }}
                        {{ UI.renderProperty('Method code'|trans, payment.methodCode) }}
                        {{ UI.renderProperty('Ammount'|trans, payment.amount) }}
                        {{ UI.renderProperty('Currency code'|trans, payment.currencyCode) }}
                        {{ UI.renderProperty('State'|trans, payment.state) }}
                        {{ UI.renderProperty('Created date'|trans, payment.createdAt | date('Y-m-d H:i:s')) }}
                        {{ UI.renderProperty('Updated date'|trans, payment.updatedAt ?  payment.updatedAt|date('Y-m-d H:i:s'): '') }}
                    </div>
                </div>
            {% endfor %}
        </div>
    {% endset %}
    {% set dataBlocks = [
        {
            'title': 'Subscription data'|trans,
            'class': 'active',
            'subblocks': [
                { 'data' : [data] },
            ]
        },
        {
            'title': 'Subscription payments'|trans,
            'class': 'inactive',
            'subblocks': [
                { 'data' : [payments] },
            ]
        }
    ] %}

    {% set id = 'subscriptionView' %}
    {% set data = { 'dataBlocks': dataBlocks } %}
    {{ parent() }}

    <script type="text/javascript">
        require(['jquery', 'oroui/js/standart-confirmation', 'oroui/js/mediator', 'oroui/js/messenger'],
            function ($, confirmation, mediator, messenger) {
                $(document).ready(function () {
                    $('.cancel-btn').on('click', function () {
                        var confirm = new confirmation({
                            content: '{{ 'ph.paymenthub.subscriptions.cancel.confirm.label'|trans }}',
                            okText: '{{ 'Yes'|trans }}',
                            cancelText: '{{ 'No'|trans }}'
                        });
                        confirm.on('ok', _.bind(function () {
                            mediator.execute('showLoading');
                            $.ajax({
                                url: '{{ path('subscriptions.subscription_cancel', {'id': entity.id}) }}',
                                type: 'DELETE',
                            }).done(function() {
                                mediator.once('page:afterChange', function(){
                                    messenger.notificationFlashMessage('success', '{{ 'ph.paymenthub.subscriptions.cancel.cancelled.label'|trans }}');
                                });
                                mediator.execute('redirectTo', {url: '{{ app.request.uri }}'}, {redirect: true});
                            }).always(function () {
                                mediator.execute('hideLoading');
                            });

                        }, this));

                        confirm.open();

                        return false;
                    });
                });
            });
    </script>
{% endblock content_data %}